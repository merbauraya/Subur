/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.MetadataSchema;
import com.idetronic.subur.model.MetadataSchemaModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MetadataSchema service. Represents a row in the &quot;Subur_MetadataSchema&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.MetadataSchemaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MetadataSchemaImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see MetadataSchemaImpl
 * @see com.idetronic.subur.model.MetadataSchema
 * @see com.idetronic.subur.model.MetadataSchemaModel
 * @generated
 */
public class MetadataSchemaModelImpl extends BaseModelImpl<MetadataSchema>
	implements MetadataSchemaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a metadata schema model instance should use the {@link com.idetronic.subur.model.MetadataSchema} interface instead.
	 */
	public static final String TABLE_NAME = "Subur_MetadataSchema";
	public static final Object[][] TABLE_COLUMNS = {
			{ "metadataSchemaId", Types.BIGINT },
			{ "metadataName", Types.VARCHAR },
			{ "nameSpace", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Subur_MetadataSchema (metadataSchemaId LONG not null primary key,metadataName VARCHAR(1024) null,nameSpace VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Subur_MetadataSchema";
	public static final String ORDER_BY_JPQL = " ORDER BY metadataSchema.metadataSchemaId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Subur_MetadataSchema.metadataSchemaId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.MetadataSchema"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.MetadataSchema"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.MetadataSchema"));

	public MetadataSchemaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _metadataSchemaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMetadataSchemaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _metadataSchemaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MetadataSchema.class;
	}

	@Override
	public String getModelClassName() {
		return MetadataSchema.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("metadataSchemaId", getMetadataSchemaId());
		attributes.put("metadataName", getMetadataName());
		attributes.put("nameSpace", getNameSpace());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long metadataSchemaId = (Long)attributes.get("metadataSchemaId");

		if (metadataSchemaId != null) {
			setMetadataSchemaId(metadataSchemaId);
		}

		String metadataName = (String)attributes.get("metadataName");

		if (metadataName != null) {
			setMetadataName(metadataName);
		}

		String nameSpace = (String)attributes.get("nameSpace");

		if (nameSpace != null) {
			setNameSpace(nameSpace);
		}
	}

	@Override
	public long getMetadataSchemaId() {
		return _metadataSchemaId;
	}

	@Override
	public void setMetadataSchemaId(long metadataSchemaId) {
		_metadataSchemaId = metadataSchemaId;
	}

	@Override
	public String getMetadataName() {
		if (_metadataName == null) {
			return StringPool.BLANK;
		}
		else {
			return _metadataName;
		}
	}

	@Override
	public void setMetadataName(String metadataName) {
		_metadataName = metadataName;
	}

	@Override
	public String getNameSpace() {
		if (_nameSpace == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameSpace;
		}
	}

	@Override
	public void setNameSpace(String nameSpace) {
		_nameSpace = nameSpace;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MetadataSchema.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MetadataSchema toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MetadataSchema)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MetadataSchemaImpl metadataSchemaImpl = new MetadataSchemaImpl();

		metadataSchemaImpl.setMetadataSchemaId(getMetadataSchemaId());
		metadataSchemaImpl.setMetadataName(getMetadataName());
		metadataSchemaImpl.setNameSpace(getNameSpace());

		metadataSchemaImpl.resetOriginalValues();

		return metadataSchemaImpl;
	}

	@Override
	public int compareTo(MetadataSchema metadataSchema) {
		long primaryKey = metadataSchema.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MetadataSchema)) {
			return false;
		}

		MetadataSchema metadataSchema = (MetadataSchema)obj;

		long primaryKey = metadataSchema.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MetadataSchema> toCacheModel() {
		MetadataSchemaCacheModel metadataSchemaCacheModel = new MetadataSchemaCacheModel();

		metadataSchemaCacheModel.metadataSchemaId = getMetadataSchemaId();

		metadataSchemaCacheModel.metadataName = getMetadataName();

		String metadataName = metadataSchemaCacheModel.metadataName;

		if ((metadataName != null) && (metadataName.length() == 0)) {
			metadataSchemaCacheModel.metadataName = null;
		}

		metadataSchemaCacheModel.nameSpace = getNameSpace();

		String nameSpace = metadataSchemaCacheModel.nameSpace;

		if ((nameSpace != null) && (nameSpace.length() == 0)) {
			metadataSchemaCacheModel.nameSpace = null;
		}

		return metadataSchemaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{metadataSchemaId=");
		sb.append(getMetadataSchemaId());
		sb.append(", metadataName=");
		sb.append(getMetadataName());
		sb.append(", nameSpace=");
		sb.append(getNameSpace());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.MetadataSchema");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>metadataSchemaId</column-name><column-value><![CDATA[");
		sb.append(getMetadataSchemaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metadataName</column-name><column-value><![CDATA[");
		sb.append(getMetadataName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameSpace</column-name><column-value><![CDATA[");
		sb.append(getNameSpace());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MetadataSchema.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MetadataSchema.class
		};
	private long _metadataSchemaId;
	private String _metadataName;
	private String _nameSpace;
	private MetadataSchema _escapedModel;
}