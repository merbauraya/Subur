/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.FileEntryType;
import com.idetronic.subur.model.FileEntryTypeModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FileEntryType service. Represents a row in the &quot;subur_FileEntryType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.FileEntryTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FileEntryTypeImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see FileEntryTypeImpl
 * @see com.idetronic.subur.model.FileEntryType
 * @see com.idetronic.subur.model.FileEntryTypeModel
 * @generated
 */
public class FileEntryTypeModelImpl extends BaseModelImpl<FileEntryType>
	implements FileEntryTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a file entry type model instance should use the {@link com.idetronic.subur.model.FileEntryType} interface instead.
	 */
	public static final String TABLE_NAME = "subur_FileEntryType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "typeId", Types.BIGINT },
			{ "typeName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table subur_FileEntryType (typeId LONG not null primary key,typeName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table subur_FileEntryType";
	public static final String ORDER_BY_JPQL = " ORDER BY fileEntryType.typeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY subur_FileEntryType.typeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.FileEntryType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.FileEntryType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.FileEntryType"));

	public FileEntryTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _typeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _typeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FileEntryType.class;
	}

	@Override
	public String getModelClassName() {
		return FileEntryType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("typeId", getTypeId());
		attributes.put("typeName", getTypeName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long typeId = (Long)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		String typeName = (String)attributes.get("typeName");

		if (typeName != null) {
			setTypeName(typeName);
		}
	}

	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_typeId = typeId;
	}

	@Override
	public String getTypeName() {
		if (_typeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeName;
		}
	}

	@Override
	public void setTypeName(String typeName) {
		_typeName = typeName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FileEntryType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FileEntryType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FileEntryType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FileEntryTypeImpl fileEntryTypeImpl = new FileEntryTypeImpl();

		fileEntryTypeImpl.setTypeId(getTypeId());
		fileEntryTypeImpl.setTypeName(getTypeName());

		fileEntryTypeImpl.resetOriginalValues();

		return fileEntryTypeImpl;
	}

	@Override
	public int compareTo(FileEntryType fileEntryType) {
		long primaryKey = fileEntryType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FileEntryType)) {
			return false;
		}

		FileEntryType fileEntryType = (FileEntryType)obj;

		long primaryKey = fileEntryType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<FileEntryType> toCacheModel() {
		FileEntryTypeCacheModel fileEntryTypeCacheModel = new FileEntryTypeCacheModel();

		fileEntryTypeCacheModel.typeId = getTypeId();

		fileEntryTypeCacheModel.typeName = getTypeName();

		String typeName = fileEntryTypeCacheModel.typeName;

		if ((typeName != null) && (typeName.length() == 0)) {
			fileEntryTypeCacheModel.typeName = null;
		}

		return fileEntryTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{typeId=");
		sb.append(getTypeId());
		sb.append(", typeName=");
		sb.append(getTypeName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.FileEntryType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeName</column-name><column-value><![CDATA[");
		sb.append(getTypeName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FileEntryType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FileEntryType.class
		};
	private long _typeId;
	private String _typeName;
	private FileEntryType _escapedModel;
}