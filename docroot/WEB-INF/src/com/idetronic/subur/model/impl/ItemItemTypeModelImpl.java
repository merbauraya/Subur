/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.ItemItemType;
import com.idetronic.subur.model.ItemItemTypeModel;
import com.idetronic.subur.service.persistence.ItemItemTypePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ItemItemType service. Represents a row in the &quot;Subur_ItemItemType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.ItemItemTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemItemTypeImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see ItemItemTypeImpl
 * @see com.idetronic.subur.model.ItemItemType
 * @see com.idetronic.subur.model.ItemItemTypeModel
 * @generated
 */
public class ItemItemTypeModelImpl extends BaseModelImpl<ItemItemType>
	implements ItemItemTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item item type model instance should use the {@link com.idetronic.subur.model.ItemItemType} interface instead.
	 */
	public static final String TABLE_NAME = "Subur_ItemItemType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemId", Types.BIGINT },
			{ "itemTypeId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Subur_ItemItemType (itemId LONG not null,itemTypeId LONG not null,primary key (itemId, itemTypeId))";
	public static final String TABLE_SQL_DROP = "drop table Subur_ItemItemType";
	public static final String ORDER_BY_JPQL = " ORDER BY itemItemType.id.itemId ASC, itemItemType.id.itemTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Subur_ItemItemType.itemId ASC, Subur_ItemItemType.itemTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.ItemItemType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.ItemItemType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.subur.model.ItemItemType"),
			true);
	public static long ITEMID_COLUMN_BITMASK = 1L;
	public static long ITEMTYPEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.ItemItemType"));

	public ItemItemTypeModelImpl() {
	}

	@Override
	public ItemItemTypePK getPrimaryKey() {
		return new ItemItemTypePK(_itemId, _itemTypeId);
	}

	@Override
	public void setPrimaryKey(ItemItemTypePK primaryKey) {
		setItemId(primaryKey.itemId);
		setItemTypeId(primaryKey.itemTypeId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ItemItemTypePK(_itemId, _itemTypeId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ItemItemTypePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ItemItemType.class;
	}

	@Override
	public String getModelClassName() {
		return ItemItemType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemId", getItemId());
		attributes.put("itemTypeId", getItemTypeId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemId = (Long)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Long itemTypeId = (Long)attributes.get("itemTypeId");

		if (itemTypeId != null) {
			setItemTypeId(itemTypeId);
		}
	}

	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		_columnBitmask |= ITEMID_COLUMN_BITMASK;

		if (!_setOriginalItemId) {
			_setOriginalItemId = true;

			_originalItemId = _itemId;
		}

		_itemId = itemId;
	}

	public long getOriginalItemId() {
		return _originalItemId;
	}

	@Override
	public long getItemTypeId() {
		return _itemTypeId;
	}

	@Override
	public void setItemTypeId(long itemTypeId) {
		_columnBitmask |= ITEMTYPEID_COLUMN_BITMASK;

		if (!_setOriginalItemTypeId) {
			_setOriginalItemTypeId = true;

			_originalItemTypeId = _itemTypeId;
		}

		_itemTypeId = itemTypeId;
	}

	public long getOriginalItemTypeId() {
		return _originalItemTypeId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ItemItemType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ItemItemType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemItemTypeImpl itemItemTypeImpl = new ItemItemTypeImpl();

		itemItemTypeImpl.setItemId(getItemId());
		itemItemTypeImpl.setItemTypeId(getItemTypeId());

		itemItemTypeImpl.resetOriginalValues();

		return itemItemTypeImpl;
	}

	@Override
	public int compareTo(ItemItemType itemItemType) {
		ItemItemTypePK primaryKey = itemItemType.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ItemItemType)) {
			return false;
		}

		ItemItemType itemItemType = (ItemItemType)obj;

		ItemItemTypePK primaryKey = itemItemType.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ItemItemTypeModelImpl itemItemTypeModelImpl = this;

		itemItemTypeModelImpl._originalItemId = itemItemTypeModelImpl._itemId;

		itemItemTypeModelImpl._setOriginalItemId = false;

		itemItemTypeModelImpl._originalItemTypeId = itemItemTypeModelImpl._itemTypeId;

		itemItemTypeModelImpl._setOriginalItemTypeId = false;

		itemItemTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ItemItemType> toCacheModel() {
		ItemItemTypeCacheModel itemItemTypeCacheModel = new ItemItemTypeCacheModel();

		itemItemTypeCacheModel.itemId = getItemId();

		itemItemTypeCacheModel.itemTypeId = getItemTypeId();

		return itemItemTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{itemId=");
		sb.append(getItemId());
		sb.append(", itemTypeId=");
		sb.append(getItemTypeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.ItemItemType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemTypeId</column-name><column-value><![CDATA[");
		sb.append(getItemTypeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ItemItemType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ItemItemType.class
		};
	private long _itemId;
	private long _originalItemId;
	private boolean _setOriginalItemId;
	private long _itemTypeId;
	private long _originalItemTypeId;
	private boolean _setOriginalItemTypeId;
	private long _columnBitmask;
	private ItemItemType _escapedModel;
}