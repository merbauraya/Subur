/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.MetadataValueView;
import com.idetronic.subur.model.MetadataValueViewModel;
import com.idetronic.subur.service.persistence.MetadataValueViewPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MetadataValueView service. Represents a row in the &quot;subur_MetadataValueView&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.MetadataValueViewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MetadataValueViewImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see MetadataValueViewImpl
 * @see com.idetronic.subur.model.MetadataValueView
 * @see com.idetronic.subur.model.MetadataValueViewModel
 * @generated
 */
public class MetadataValueViewModelImpl extends BaseModelImpl<MetadataValueView>
	implements MetadataValueViewModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a metadata value view model instance should use the {@link com.idetronic.subur.model.MetadataValueView} interface instead.
	 */
	public static final String TABLE_NAME = "subur_MetadataValueView";
	public static final Object[][] TABLE_COLUMNS = {
			{ "propertyId", Types.BIGINT },
			{ "subjectId", Types.BIGINT },
			{ "subjectName", Types.VARCHAR },
			{ "textValue", Types.VARCHAR },
			{ "itemCount", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table subur_MetadataValueView (propertyId LONG not null,subjectId LONG not null,subjectName VARCHAR(75) null,textValue VARCHAR(75) null,itemCount INTEGER,primary key (propertyId, subjectId))";
	public static final String TABLE_SQL_DROP = "drop table subur_MetadataValueView";
	public static final String ORDER_BY_JPQL = " ORDER BY metadataValueView.id.propertyId ASC, metadataValueView.id.subjectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY subur_MetadataValueView.propertyId ASC, subur_MetadataValueView.subjectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.MetadataValueView"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.MetadataValueView"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.MetadataValueView"));

	public MetadataValueViewModelImpl() {
	}

	@Override
	public MetadataValueViewPK getPrimaryKey() {
		return new MetadataValueViewPK(_propertyId, _subjectId);
	}

	@Override
	public void setPrimaryKey(MetadataValueViewPK primaryKey) {
		setPropertyId(primaryKey.propertyId);
		setSubjectId(primaryKey.subjectId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new MetadataValueViewPK(_propertyId, _subjectId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((MetadataValueViewPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return MetadataValueView.class;
	}

	@Override
	public String getModelClassName() {
		return MetadataValueView.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("propertyId", getPropertyId());
		attributes.put("subjectId", getSubjectId());
		attributes.put("subjectName", getSubjectName());
		attributes.put("textValue", getTextValue());
		attributes.put("itemCount", getItemCount());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long propertyId = (Long)attributes.get("propertyId");

		if (propertyId != null) {
			setPropertyId(propertyId);
		}

		Long subjectId = (Long)attributes.get("subjectId");

		if (subjectId != null) {
			setSubjectId(subjectId);
		}

		String subjectName = (String)attributes.get("subjectName");

		if (subjectName != null) {
			setSubjectName(subjectName);
		}

		String textValue = (String)attributes.get("textValue");

		if (textValue != null) {
			setTextValue(textValue);
		}

		Integer itemCount = (Integer)attributes.get("itemCount");

		if (itemCount != null) {
			setItemCount(itemCount);
		}
	}

	@Override
	public long getPropertyId() {
		return _propertyId;
	}

	@Override
	public void setPropertyId(long propertyId) {
		_propertyId = propertyId;
	}

	@Override
	public long getSubjectId() {
		return _subjectId;
	}

	@Override
	public void setSubjectId(long subjectId) {
		_subjectId = subjectId;
	}

	@Override
	public String getSubjectName() {
		if (_subjectName == null) {
			return StringPool.BLANK;
		}
		else {
			return _subjectName;
		}
	}

	@Override
	public void setSubjectName(String subjectName) {
		_subjectName = subjectName;
	}

	@Override
	public String getTextValue() {
		if (_textValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _textValue;
		}
	}

	@Override
	public void setTextValue(String textValue) {
		_textValue = textValue;
	}

	@Override
	public int getItemCount() {
		return _itemCount;
	}

	@Override
	public void setItemCount(int itemCount) {
		_itemCount = itemCount;
	}

	@Override
	public MetadataValueView toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MetadataValueView)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MetadataValueViewImpl metadataValueViewImpl = new MetadataValueViewImpl();

		metadataValueViewImpl.setPropertyId(getPropertyId());
		metadataValueViewImpl.setSubjectId(getSubjectId());
		metadataValueViewImpl.setSubjectName(getSubjectName());
		metadataValueViewImpl.setTextValue(getTextValue());
		metadataValueViewImpl.setItemCount(getItemCount());

		metadataValueViewImpl.resetOriginalValues();

		return metadataValueViewImpl;
	}

	@Override
	public int compareTo(MetadataValueView metadataValueView) {
		MetadataValueViewPK primaryKey = metadataValueView.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MetadataValueView)) {
			return false;
		}

		MetadataValueView metadataValueView = (MetadataValueView)obj;

		MetadataValueViewPK primaryKey = metadataValueView.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MetadataValueView> toCacheModel() {
		MetadataValueViewCacheModel metadataValueViewCacheModel = new MetadataValueViewCacheModel();

		metadataValueViewCacheModel.propertyId = getPropertyId();

		metadataValueViewCacheModel.subjectId = getSubjectId();

		metadataValueViewCacheModel.subjectName = getSubjectName();

		String subjectName = metadataValueViewCacheModel.subjectName;

		if ((subjectName != null) && (subjectName.length() == 0)) {
			metadataValueViewCacheModel.subjectName = null;
		}

		metadataValueViewCacheModel.textValue = getTextValue();

		String textValue = metadataValueViewCacheModel.textValue;

		if ((textValue != null) && (textValue.length() == 0)) {
			metadataValueViewCacheModel.textValue = null;
		}

		metadataValueViewCacheModel.itemCount = getItemCount();

		return metadataValueViewCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{propertyId=");
		sb.append(getPropertyId());
		sb.append(", subjectId=");
		sb.append(getSubjectId());
		sb.append(", subjectName=");
		sb.append(getSubjectName());
		sb.append(", textValue=");
		sb.append(getTextValue());
		sb.append(", itemCount=");
		sb.append(getItemCount());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.MetadataValueView");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>propertyId</column-name><column-value><![CDATA[");
		sb.append(getPropertyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subjectId</column-name><column-value><![CDATA[");
		sb.append(getSubjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subjectName</column-name><column-value><![CDATA[");
		sb.append(getSubjectName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>textValue</column-name><column-value><![CDATA[");
		sb.append(getTextValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemCount</column-name><column-value><![CDATA[");
		sb.append(getItemCount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MetadataValueView.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MetadataValueView.class
		};
	private long _propertyId;
	private long _subjectId;
	private String _subjectName;
	private String _textValue;
	private int _itemCount;
	private MetadataValueView _escapedModel;
}