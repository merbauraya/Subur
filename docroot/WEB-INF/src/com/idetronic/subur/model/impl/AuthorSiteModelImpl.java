/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.AuthorSite;
import com.idetronic.subur.model.AuthorSiteModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AuthorSite service. Represents a row in the &quot;Subur_AuthorSite&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.AuthorSiteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuthorSiteImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see AuthorSiteImpl
 * @see com.idetronic.subur.model.AuthorSite
 * @see com.idetronic.subur.model.AuthorSiteModel
 * @generated
 */
public class AuthorSiteModelImpl extends BaseModelImpl<AuthorSite>
	implements AuthorSiteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a author site model instance should use the {@link com.idetronic.subur.model.AuthorSite} interface instead.
	 */
	public static final String TABLE_NAME = "Subur_AuthorSite";
	public static final Object[][] TABLE_COLUMNS = {
			{ "authorSiteId", Types.BIGINT },
			{ "authorId", Types.BIGINT },
			{ "siteName", Types.VARCHAR },
			{ "siteURL", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Subur_AuthorSite (authorSiteId LONG not null primary key,authorId LONG,siteName VARCHAR(75) null,siteURL VARCHAR(150) null)";
	public static final String TABLE_SQL_DROP = "drop table Subur_AuthorSite";
	public static final String ORDER_BY_JPQL = " ORDER BY authorSite.authorSiteId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Subur_AuthorSite.authorSiteId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.AuthorSite"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.AuthorSite"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.subur.model.AuthorSite"),
			true);
	public static long AUTHORID_COLUMN_BITMASK = 1L;
	public static long SITENAME_COLUMN_BITMASK = 2L;
	public static long AUTHORSITEID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.AuthorSite"));

	public AuthorSiteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _authorSiteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuthorSiteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _authorSiteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AuthorSite.class;
	}

	@Override
	public String getModelClassName() {
		return AuthorSite.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("authorSiteId", getAuthorSiteId());
		attributes.put("authorId", getAuthorId());
		attributes.put("siteName", getSiteName());
		attributes.put("siteURL", getSiteURL());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long authorSiteId = (Long)attributes.get("authorSiteId");

		if (authorSiteId != null) {
			setAuthorSiteId(authorSiteId);
		}

		Long authorId = (Long)attributes.get("authorId");

		if (authorId != null) {
			setAuthorId(authorId);
		}

		String siteName = (String)attributes.get("siteName");

		if (siteName != null) {
			setSiteName(siteName);
		}

		String siteURL = (String)attributes.get("siteURL");

		if (siteURL != null) {
			setSiteURL(siteURL);
		}
	}

	@Override
	public long getAuthorSiteId() {
		return _authorSiteId;
	}

	@Override
	public void setAuthorSiteId(long authorSiteId) {
		_authorSiteId = authorSiteId;
	}

	@Override
	public long getAuthorId() {
		return _authorId;
	}

	@Override
	public void setAuthorId(long authorId) {
		_columnBitmask |= AUTHORID_COLUMN_BITMASK;

		if (!_setOriginalAuthorId) {
			_setOriginalAuthorId = true;

			_originalAuthorId = _authorId;
		}

		_authorId = authorId;
	}

	public long getOriginalAuthorId() {
		return _originalAuthorId;
	}

	@Override
	public String getSiteName() {
		if (_siteName == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteName;
		}
	}

	@Override
	public void setSiteName(String siteName) {
		_columnBitmask |= SITENAME_COLUMN_BITMASK;

		if (_originalSiteName == null) {
			_originalSiteName = _siteName;
		}

		_siteName = siteName;
	}

	public String getOriginalSiteName() {
		return GetterUtil.getString(_originalSiteName);
	}

	@Override
	public String getSiteURL() {
		if (_siteURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _siteURL;
		}
	}

	@Override
	public void setSiteURL(String siteURL) {
		_siteURL = siteURL;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AuthorSite.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AuthorSite toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AuthorSite)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AuthorSiteImpl authorSiteImpl = new AuthorSiteImpl();

		authorSiteImpl.setAuthorSiteId(getAuthorSiteId());
		authorSiteImpl.setAuthorId(getAuthorId());
		authorSiteImpl.setSiteName(getSiteName());
		authorSiteImpl.setSiteURL(getSiteURL());

		authorSiteImpl.resetOriginalValues();

		return authorSiteImpl;
	}

	@Override
	public int compareTo(AuthorSite authorSite) {
		long primaryKey = authorSite.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AuthorSite)) {
			return false;
		}

		AuthorSite authorSite = (AuthorSite)obj;

		long primaryKey = authorSite.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AuthorSiteModelImpl authorSiteModelImpl = this;

		authorSiteModelImpl._originalAuthorId = authorSiteModelImpl._authorId;

		authorSiteModelImpl._setOriginalAuthorId = false;

		authorSiteModelImpl._originalSiteName = authorSiteModelImpl._siteName;

		authorSiteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AuthorSite> toCacheModel() {
		AuthorSiteCacheModel authorSiteCacheModel = new AuthorSiteCacheModel();

		authorSiteCacheModel.authorSiteId = getAuthorSiteId();

		authorSiteCacheModel.authorId = getAuthorId();

		authorSiteCacheModel.siteName = getSiteName();

		String siteName = authorSiteCacheModel.siteName;

		if ((siteName != null) && (siteName.length() == 0)) {
			authorSiteCacheModel.siteName = null;
		}

		authorSiteCacheModel.siteURL = getSiteURL();

		String siteURL = authorSiteCacheModel.siteURL;

		if ((siteURL != null) && (siteURL.length() == 0)) {
			authorSiteCacheModel.siteURL = null;
		}

		return authorSiteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{authorSiteId=");
		sb.append(getAuthorSiteId());
		sb.append(", authorId=");
		sb.append(getAuthorId());
		sb.append(", siteName=");
		sb.append(getSiteName());
		sb.append(", siteURL=");
		sb.append(getSiteURL());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.AuthorSite");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>authorSiteId</column-name><column-value><![CDATA[");
		sb.append(getAuthorSiteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorId</column-name><column-value><![CDATA[");
		sb.append(getAuthorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteName</column-name><column-value><![CDATA[");
		sb.append(getSiteName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteURL</column-name><column-value><![CDATA[");
		sb.append(getSiteURL());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AuthorSite.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AuthorSite.class
		};
	private long _authorSiteId;
	private long _authorId;
	private long _originalAuthorId;
	private boolean _setOriginalAuthorId;
	private String _siteName;
	private String _originalSiteName;
	private String _siteURL;
	private long _columnBitmask;
	private AuthorSite _escapedModel;
}