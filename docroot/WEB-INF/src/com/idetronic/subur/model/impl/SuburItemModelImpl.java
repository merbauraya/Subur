/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.SuburItem;
import com.idetronic.subur.model.SuburItemModel;
import com.idetronic.subur.model.SuburItemSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SuburItem service. Represents a row in the &quot;Subur_Item&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.SuburItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SuburItemImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see SuburItemImpl
 * @see com.idetronic.subur.model.SuburItem
 * @see com.idetronic.subur.model.SuburItemModel
 * @generated
 */
@JSON(strict = true)
public class SuburItemModelImpl extends BaseModelImpl<SuburItem>
	implements SuburItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a subur item model instance should use the {@link com.idetronic.subur.model.SuburItem} interface instead.
	 */
	public static final String TABLE_NAME = "Subur_Item";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "publishedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "itemAbstract", Types.CLOB },
			{ "language", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "Uuid", Types.VARCHAR },
			{ "metadataValue", Types.CLOB },
			{ "relatedRestricted", Types.BOOLEAN },
			{ "statusByUserId", Types.BIGINT },
			{ "statusDate", Types.TIMESTAMP },
			{ "completed", Types.BOOLEAN },
			{ "coverImageId", Types.BIGINT },
			{ "counted", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Subur_Item (itemId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,publishedDate DATE null,title VARCHAR(255) null,itemAbstract TEXT null,language VARCHAR(75) null,status INTEGER,Uuid VARCHAR(75) null,metadataValue TEXT null,relatedRestricted BOOLEAN,statusByUserId LONG,statusDate DATE null,completed BOOLEAN,coverImageId LONG,counted BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Subur_Item";
	public static final String ORDER_BY_JPQL = " ORDER BY suburItem.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Subur_Item.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.SuburItem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.SuburItem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.subur.model.SuburItem"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SuburItem toModel(SuburItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SuburItem model = new SuburItemImpl();

		model.setItemId(soapModel.getItemId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPublishedDate(soapModel.getPublishedDate());
		model.setTitle(soapModel.getTitle());
		model.setItemAbstract(soapModel.getItemAbstract());
		model.setLanguage(soapModel.getLanguage());
		model.setStatus(soapModel.getStatus());
		model.setUuid(soapModel.getUuid());
		model.setMetadataValue(soapModel.getMetadataValue());
		model.setRelatedRestricted(soapModel.getRelatedRestricted());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusDate(soapModel.getStatusDate());
		model.setCompleted(soapModel.getCompleted());
		model.setCoverImageId(soapModel.getCoverImageId());
		model.setCounted(soapModel.getCounted());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SuburItem> toModels(SuburItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SuburItem> models = new ArrayList<SuburItem>(soapModels.length);

		for (SuburItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.SuburItem"));

	public SuburItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _itemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _itemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SuburItem.class;
	}

	@Override
	public String getModelClassName() {
		return SuburItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemId", getItemId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("publishedDate", getPublishedDate());
		attributes.put("title", getTitle());
		attributes.put("itemAbstract", getItemAbstract());
		attributes.put("language", getLanguage());
		attributes.put("status", getStatus());
		attributes.put("Uuid", getUuid());
		attributes.put("metadataValue", getMetadataValue());
		attributes.put("relatedRestricted", getRelatedRestricted());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusDate", getStatusDate());
		attributes.put("completed", getCompleted());
		attributes.put("coverImageId", getCoverImageId());
		attributes.put("counted", getCounted());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemId = (Long)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date publishedDate = (Date)attributes.get("publishedDate");

		if (publishedDate != null) {
			setPublishedDate(publishedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String itemAbstract = (String)attributes.get("itemAbstract");

		if (itemAbstract != null) {
			setItemAbstract(itemAbstract);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String Uuid = (String)attributes.get("Uuid");

		if (Uuid != null) {
			setUuid(Uuid);
		}

		String metadataValue = (String)attributes.get("metadataValue");

		if (metadataValue != null) {
			setMetadataValue(metadataValue);
		}

		Boolean relatedRestricted = (Boolean)attributes.get("relatedRestricted");

		if (relatedRestricted != null) {
			setRelatedRestricted(relatedRestricted);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Boolean completed = (Boolean)attributes.get("completed");

		if (completed != null) {
			setCompleted(completed);
		}

		Long coverImageId = (Long)attributes.get("coverImageId");

		if (coverImageId != null) {
			setCoverImageId(coverImageId);
		}

		Boolean counted = (Boolean)attributes.get("counted");

		if (counted != null) {
			setCounted(counted);
		}
	}

	@JSON
	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		_itemId = itemId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getPublishedDate() {
		return _publishedDate;
	}

	@Override
	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getItemAbstract() {
		if (_itemAbstract == null) {
			return StringPool.BLANK;
		}
		else {
			return _itemAbstract;
		}
	}

	@Override
	public void setItemAbstract(String itemAbstract) {
		_itemAbstract = itemAbstract;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_Uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _Uuid;
		}
	}

	@Override
	public void setUuid(String Uuid) {
		_Uuid = Uuid;
	}

	@JSON
	@Override
	public String getMetadataValue() {
		if (_metadataValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _metadataValue;
		}
	}

	@Override
	public void setMetadataValue(String metadataValue) {
		_metadataValue = metadataValue;
	}

	@JSON
	@Override
	public boolean getRelatedRestricted() {
		return _relatedRestricted;
	}

	@Override
	public boolean isRelatedRestricted() {
		return _relatedRestricted;
	}

	@Override
	public void setRelatedRestricted(boolean relatedRestricted) {
		_relatedRestricted = relatedRestricted;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public boolean getCompleted() {
		return _completed;
	}

	@Override
	public boolean isCompleted() {
		return _completed;
	}

	@Override
	public void setCompleted(boolean completed) {
		_completed = completed;
	}

	@JSON
	@Override
	public long getCoverImageId() {
		return _coverImageId;
	}

	@Override
	public void setCoverImageId(long coverImageId) {
		_coverImageId = coverImageId;
	}

	@JSON
	@Override
	public boolean getCounted() {
		return _counted;
	}

	@Override
	public boolean isCounted() {
		return _counted;
	}

	@Override
	public void setCounted(boolean counted) {
		_counted = counted;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SuburItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SuburItem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SuburItem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SuburItemImpl suburItemImpl = new SuburItemImpl();

		suburItemImpl.setItemId(getItemId());
		suburItemImpl.setCompanyId(getCompanyId());
		suburItemImpl.setGroupId(getGroupId());
		suburItemImpl.setUserId(getUserId());
		suburItemImpl.setUserName(getUserName());
		suburItemImpl.setCreateDate(getCreateDate());
		suburItemImpl.setModifiedDate(getModifiedDate());
		suburItemImpl.setPublishedDate(getPublishedDate());
		suburItemImpl.setTitle(getTitle());
		suburItemImpl.setItemAbstract(getItemAbstract());
		suburItemImpl.setLanguage(getLanguage());
		suburItemImpl.setStatus(getStatus());
		suburItemImpl.setUuid(getUuid());
		suburItemImpl.setMetadataValue(getMetadataValue());
		suburItemImpl.setRelatedRestricted(getRelatedRestricted());
		suburItemImpl.setStatusByUserId(getStatusByUserId());
		suburItemImpl.setStatusDate(getStatusDate());
		suburItemImpl.setCompleted(getCompleted());
		suburItemImpl.setCoverImageId(getCoverImageId());
		suburItemImpl.setCounted(getCounted());

		suburItemImpl.resetOriginalValues();

		return suburItemImpl;
	}

	@Override
	public int compareTo(SuburItem suburItem) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), suburItem.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SuburItem)) {
			return false;
		}

		SuburItem suburItem = (SuburItem)obj;

		long primaryKey = suburItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SuburItemModelImpl suburItemModelImpl = this;

		suburItemModelImpl._originalCompanyId = suburItemModelImpl._companyId;

		suburItemModelImpl._setOriginalCompanyId = false;

		suburItemModelImpl._originalGroupId = suburItemModelImpl._groupId;

		suburItemModelImpl._setOriginalGroupId = false;

		suburItemModelImpl._originalUserId = suburItemModelImpl._userId;

		suburItemModelImpl._setOriginalUserId = false;

		suburItemModelImpl._originalStatus = suburItemModelImpl._status;

		suburItemModelImpl._setOriginalStatus = false;

		suburItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SuburItem> toCacheModel() {
		SuburItemCacheModel suburItemCacheModel = new SuburItemCacheModel();

		suburItemCacheModel.itemId = getItemId();

		suburItemCacheModel.companyId = getCompanyId();

		suburItemCacheModel.groupId = getGroupId();

		suburItemCacheModel.userId = getUserId();

		suburItemCacheModel.userName = getUserName();

		String userName = suburItemCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			suburItemCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			suburItemCacheModel.createDate = createDate.getTime();
		}
		else {
			suburItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			suburItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			suburItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date publishedDate = getPublishedDate();

		if (publishedDate != null) {
			suburItemCacheModel.publishedDate = publishedDate.getTime();
		}
		else {
			suburItemCacheModel.publishedDate = Long.MIN_VALUE;
		}

		suburItemCacheModel.title = getTitle();

		String title = suburItemCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			suburItemCacheModel.title = null;
		}

		suburItemCacheModel.itemAbstract = getItemAbstract();

		String itemAbstract = suburItemCacheModel.itemAbstract;

		if ((itemAbstract != null) && (itemAbstract.length() == 0)) {
			suburItemCacheModel.itemAbstract = null;
		}

		suburItemCacheModel.language = getLanguage();

		String language = suburItemCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			suburItemCacheModel.language = null;
		}

		suburItemCacheModel.status = getStatus();

		suburItemCacheModel.Uuid = getUuid();

		String Uuid = suburItemCacheModel.Uuid;

		if ((Uuid != null) && (Uuid.length() == 0)) {
			suburItemCacheModel.Uuid = null;
		}

		suburItemCacheModel.metadataValue = getMetadataValue();

		String metadataValue = suburItemCacheModel.metadataValue;

		if ((metadataValue != null) && (metadataValue.length() == 0)) {
			suburItemCacheModel.metadataValue = null;
		}

		suburItemCacheModel.relatedRestricted = getRelatedRestricted();

		suburItemCacheModel.statusByUserId = getStatusByUserId();

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			suburItemCacheModel.statusDate = statusDate.getTime();
		}
		else {
			suburItemCacheModel.statusDate = Long.MIN_VALUE;
		}

		suburItemCacheModel.completed = getCompleted();

		suburItemCacheModel.coverImageId = getCoverImageId();

		suburItemCacheModel.counted = getCounted();

		return suburItemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{itemId=");
		sb.append(getItemId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", publishedDate=");
		sb.append(getPublishedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", itemAbstract=");
		sb.append(getItemAbstract());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", Uuid=");
		sb.append(getUuid());
		sb.append(", metadataValue=");
		sb.append(getMetadataValue());
		sb.append(", relatedRestricted=");
		sb.append(getRelatedRestricted());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", completed=");
		sb.append(getCompleted());
		sb.append(", coverImageId=");
		sb.append(getCoverImageId());
		sb.append(", counted=");
		sb.append(getCounted());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.SuburItem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedDate</column-name><column-value><![CDATA[");
		sb.append(getPublishedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemAbstract</column-name><column-value><![CDATA[");
		sb.append(getItemAbstract());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metadataValue</column-name><column-value><![CDATA[");
		sb.append(getMetadataValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relatedRestricted</column-name><column-value><![CDATA[");
		sb.append(getRelatedRestricted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>completed</column-name><column-value><![CDATA[");
		sb.append(getCompleted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coverImageId</column-name><column-value><![CDATA[");
		sb.append(getCoverImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>counted</column-name><column-value><![CDATA[");
		sb.append(getCounted());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SuburItem.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SuburItem.class
		};
	private long _itemId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _publishedDate;
	private String _title;
	private String _itemAbstract;
	private String _language;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _Uuid;
	private String _metadataValue;
	private boolean _relatedRestricted;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private Date _statusDate;
	private boolean _completed;
	private long _coverImageId;
	private boolean _counted;
	private long _columnBitmask;
	private SuburItem _escapedModel;
}