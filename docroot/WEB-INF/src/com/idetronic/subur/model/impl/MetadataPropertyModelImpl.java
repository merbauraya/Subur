/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.MetadataProperty;
import com.idetronic.subur.model.MetadataPropertyModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MetadataProperty service. Represents a row in the &quot;Subur_MetadataProperty&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.MetadataPropertyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MetadataPropertyImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see MetadataPropertyImpl
 * @see com.idetronic.subur.model.MetadataProperty
 * @see com.idetronic.subur.model.MetadataPropertyModel
 * @generated
 */
public class MetadataPropertyModelImpl extends BaseModelImpl<MetadataProperty>
	implements MetadataPropertyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a metadata property model instance should use the {@link com.idetronic.subur.model.MetadataProperty} interface instead.
	 */
	public static final String TABLE_NAME = "Subur_MetadataProperty";
	public static final Object[][] TABLE_COLUMNS = {
			{ "metadataPropertyId", Types.BIGINT },
			{ "metadataSchemaId", Types.BIGINT },
			{ "element", Types.VARCHAR },
			{ "scope", Types.VARCHAR },
			{ "note", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Subur_MetadataProperty (metadataPropertyId LONG not null primary key,metadataSchemaId LONG,element VARCHAR(255) null,scope VARCHAR(255) null,note VARCHAR(1024) null)";
	public static final String TABLE_SQL_DROP = "drop table Subur_MetadataProperty";
	public static final String ORDER_BY_JPQL = " ORDER BY metadataProperty.metadataPropertyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Subur_MetadataProperty.metadataPropertyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.MetadataProperty"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.MetadataProperty"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.MetadataProperty"));

	public MetadataPropertyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _metadataPropertyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMetadataPropertyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _metadataPropertyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MetadataProperty.class;
	}

	@Override
	public String getModelClassName() {
		return MetadataProperty.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("metadataPropertyId", getMetadataPropertyId());
		attributes.put("metadataSchemaId", getMetadataSchemaId());
		attributes.put("element", getElement());
		attributes.put("scope", getScope());
		attributes.put("note", getNote());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long metadataPropertyId = (Long)attributes.get("metadataPropertyId");

		if (metadataPropertyId != null) {
			setMetadataPropertyId(metadataPropertyId);
		}

		Long metadataSchemaId = (Long)attributes.get("metadataSchemaId");

		if (metadataSchemaId != null) {
			setMetadataSchemaId(metadataSchemaId);
		}

		String element = (String)attributes.get("element");

		if (element != null) {
			setElement(element);
		}

		String scope = (String)attributes.get("scope");

		if (scope != null) {
			setScope(scope);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}
	}

	@Override
	public long getMetadataPropertyId() {
		return _metadataPropertyId;
	}

	@Override
	public void setMetadataPropertyId(long metadataPropertyId) {
		_metadataPropertyId = metadataPropertyId;
	}

	@Override
	public long getMetadataSchemaId() {
		return _metadataSchemaId;
	}

	@Override
	public void setMetadataSchemaId(long metadataSchemaId) {
		_metadataSchemaId = metadataSchemaId;
	}

	@Override
	public String getElement() {
		if (_element == null) {
			return StringPool.BLANK;
		}
		else {
			return _element;
		}
	}

	@Override
	public void setElement(String element) {
		_element = element;
	}

	@Override
	public String getScope() {
		if (_scope == null) {
			return StringPool.BLANK;
		}
		else {
			return _scope;
		}
	}

	@Override
	public void setScope(String scope) {
		_scope = scope;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MetadataProperty.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MetadataProperty toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MetadataProperty)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MetadataPropertyImpl metadataPropertyImpl = new MetadataPropertyImpl();

		metadataPropertyImpl.setMetadataPropertyId(getMetadataPropertyId());
		metadataPropertyImpl.setMetadataSchemaId(getMetadataSchemaId());
		metadataPropertyImpl.setElement(getElement());
		metadataPropertyImpl.setScope(getScope());
		metadataPropertyImpl.setNote(getNote());

		metadataPropertyImpl.resetOriginalValues();

		return metadataPropertyImpl;
	}

	@Override
	public int compareTo(MetadataProperty metadataProperty) {
		long primaryKey = metadataProperty.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MetadataProperty)) {
			return false;
		}

		MetadataProperty metadataProperty = (MetadataProperty)obj;

		long primaryKey = metadataProperty.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MetadataProperty> toCacheModel() {
		MetadataPropertyCacheModel metadataPropertyCacheModel = new MetadataPropertyCacheModel();

		metadataPropertyCacheModel.metadataPropertyId = getMetadataPropertyId();

		metadataPropertyCacheModel.metadataSchemaId = getMetadataSchemaId();

		metadataPropertyCacheModel.element = getElement();

		String element = metadataPropertyCacheModel.element;

		if ((element != null) && (element.length() == 0)) {
			metadataPropertyCacheModel.element = null;
		}

		metadataPropertyCacheModel.scope = getScope();

		String scope = metadataPropertyCacheModel.scope;

		if ((scope != null) && (scope.length() == 0)) {
			metadataPropertyCacheModel.scope = null;
		}

		metadataPropertyCacheModel.note = getNote();

		String note = metadataPropertyCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			metadataPropertyCacheModel.note = null;
		}

		return metadataPropertyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{metadataPropertyId=");
		sb.append(getMetadataPropertyId());
		sb.append(", metadataSchemaId=");
		sb.append(getMetadataSchemaId());
		sb.append(", element=");
		sb.append(getElement());
		sb.append(", scope=");
		sb.append(getScope());
		sb.append(", note=");
		sb.append(getNote());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.MetadataProperty");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>metadataPropertyId</column-name><column-value><![CDATA[");
		sb.append(getMetadataPropertyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metadataSchemaId</column-name><column-value><![CDATA[");
		sb.append(getMetadataSchemaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>element</column-name><column-value><![CDATA[");
		sb.append(getElement());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scope</column-name><column-value><![CDATA[");
		sb.append(getScope());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MetadataProperty.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MetadataProperty.class
		};
	private long _metadataPropertyId;
	private long _metadataSchemaId;
	private String _element;
	private String _scope;
	private String _note;
	private MetadataProperty _escapedModel;
}