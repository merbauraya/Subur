/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.Expertise;
import com.idetronic.subur.model.ExpertiseModel;
import com.idetronic.subur.model.ExpertiseSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Expertise service. Represents a row in the &quot;Subur_Expertise&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.ExpertiseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExpertiseImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see ExpertiseImpl
 * @see com.idetronic.subur.model.Expertise
 * @see com.idetronic.subur.model.ExpertiseModel
 * @generated
 */
@JSON(strict = true)
public class ExpertiseModelImpl extends BaseModelImpl<Expertise>
	implements ExpertiseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a expertise model instance should use the {@link com.idetronic.subur.model.Expertise} interface instead.
	 */
	public static final String TABLE_NAME = "Subur_Expertise";
	public static final Object[][] TABLE_COLUMNS = {
			{ "expertiseId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "indexedName", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "authorCount", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table Subur_Expertise (expertiseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,name VARCHAR(75) null,indexedName VARCHAR(75) null,modifiedDate DATE null,authorCount INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table Subur_Expertise";
	public static final String ORDER_BY_JPQL = " ORDER BY expertise.expertiseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Subur_Expertise.expertiseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.Expertise"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.Expertise"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.subur.model.Expertise"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long INDEXEDNAME_COLUMN_BITMASK = 2L;
	public static long EXPERTISEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Expertise toModel(ExpertiseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Expertise model = new ExpertiseImpl();

		model.setExpertiseId(soapModel.getExpertiseId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setName(soapModel.getName());
		model.setIndexedName(soapModel.getIndexedName());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAuthorCount(soapModel.getAuthorCount());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Expertise> toModels(ExpertiseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Expertise> models = new ArrayList<Expertise>(soapModels.length);

		for (ExpertiseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.Expertise"));

	public ExpertiseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _expertiseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExpertiseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _expertiseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Expertise.class;
	}

	@Override
	public String getModelClassName() {
		return Expertise.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("expertiseId", getExpertiseId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("name", getName());
		attributes.put("indexedName", getIndexedName());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("authorCount", getAuthorCount());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long expertiseId = (Long)attributes.get("expertiseId");

		if (expertiseId != null) {
			setExpertiseId(expertiseId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String indexedName = (String)attributes.get("indexedName");

		if (indexedName != null) {
			setIndexedName(indexedName);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer authorCount = (Integer)attributes.get("authorCount");

		if (authorCount != null) {
			setAuthorCount(authorCount);
		}
	}

	@JSON
	@Override
	public long getExpertiseId() {
		return _expertiseId;
	}

	@Override
	public void setExpertiseId(long expertiseId) {
		_expertiseId = expertiseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getIndexedName() {
		if (_indexedName == null) {
			return StringPool.BLANK;
		}
		else {
			return _indexedName;
		}
	}

	@Override
	public void setIndexedName(String indexedName) {
		_columnBitmask |= INDEXEDNAME_COLUMN_BITMASK;

		if (_originalIndexedName == null) {
			_originalIndexedName = _indexedName;
		}

		_indexedName = indexedName;
	}

	public String getOriginalIndexedName() {
		return GetterUtil.getString(_originalIndexedName);
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getAuthorCount() {
		return _authorCount;
	}

	@Override
	public void setAuthorCount(int authorCount) {
		_authorCount = authorCount;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Expertise.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Expertise toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Expertise)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExpertiseImpl expertiseImpl = new ExpertiseImpl();

		expertiseImpl.setExpertiseId(getExpertiseId());
		expertiseImpl.setGroupId(getGroupId());
		expertiseImpl.setCompanyId(getCompanyId());
		expertiseImpl.setUserId(getUserId());
		expertiseImpl.setCreateDate(getCreateDate());
		expertiseImpl.setName(getName());
		expertiseImpl.setIndexedName(getIndexedName());
		expertiseImpl.setModifiedDate(getModifiedDate());
		expertiseImpl.setAuthorCount(getAuthorCount());

		expertiseImpl.resetOriginalValues();

		return expertiseImpl;
	}

	@Override
	public int compareTo(Expertise expertise) {
		long primaryKey = expertise.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Expertise)) {
			return false;
		}

		Expertise expertise = (Expertise)obj;

		long primaryKey = expertise.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ExpertiseModelImpl expertiseModelImpl = this;

		expertiseModelImpl._originalGroupId = expertiseModelImpl._groupId;

		expertiseModelImpl._setOriginalGroupId = false;

		expertiseModelImpl._originalIndexedName = expertiseModelImpl._indexedName;

		expertiseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Expertise> toCacheModel() {
		ExpertiseCacheModel expertiseCacheModel = new ExpertiseCacheModel();

		expertiseCacheModel.expertiseId = getExpertiseId();

		expertiseCacheModel.groupId = getGroupId();

		expertiseCacheModel.companyId = getCompanyId();

		expertiseCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			expertiseCacheModel.createDate = createDate.getTime();
		}
		else {
			expertiseCacheModel.createDate = Long.MIN_VALUE;
		}

		expertiseCacheModel.name = getName();

		String name = expertiseCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			expertiseCacheModel.name = null;
		}

		expertiseCacheModel.indexedName = getIndexedName();

		String indexedName = expertiseCacheModel.indexedName;

		if ((indexedName != null) && (indexedName.length() == 0)) {
			expertiseCacheModel.indexedName = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			expertiseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			expertiseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		expertiseCacheModel.authorCount = getAuthorCount();

		return expertiseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{expertiseId=");
		sb.append(getExpertiseId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", indexedName=");
		sb.append(getIndexedName());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", authorCount=");
		sb.append(getAuthorCount());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.Expertise");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>expertiseId</column-name><column-value><![CDATA[");
		sb.append(getExpertiseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>indexedName</column-name><column-value><![CDATA[");
		sb.append(getIndexedName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorCount</column-name><column-value><![CDATA[");
		sb.append(getAuthorCount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Expertise.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Expertise.class
		};
	private long _expertiseId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private String _name;
	private String _indexedName;
	private String _originalIndexedName;
	private Date _modifiedDate;
	private int _authorCount;
	private long _columnBitmask;
	private Expertise _escapedModel;
}